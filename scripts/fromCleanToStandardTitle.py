#!/usr/bin/env python 
""" 
This module demultiplex the sequence file generated by decard to separate fasta files speciesd by SAMPLENAME_R1_ID.fasta
"""
from __future__ import print_function
import argparse
from Bio import SeqIO, Entrez, pairwise2
from Bio.SeqRecord import SeqRecord
from Bio.SeqIO.FastaIO import SimpleFastaParser
from Bio.Seq import Seq
import re
import os, sys
import pandas as pd
import numpy as np
from Bio import Entrez
import tempfile
from shutil import copy2
######################################################################

palg_taxa=re.compile(r"""
(taxonomy)   #the keys group
(_)  #the values starter
(.*) #the values: everything without the = sign even one time
(_ncbitaxid)  #the values terminator
""", re.VERBOSE)

palg_organism=re.compile(r"""
(organism)   #the keys group
(_)  #the values starter
(.*) #the values
(_taxonomy)  #the values terminator
""", re.VERBOSE)

p_algtaxid=re.compile("""
        (ncbitaxid)
        (_)
        (.*)
        ($)
""", re.VERBOSE)


def main():
    """converts algn fasta titles to standard titles in ncbi format"""

    args_parser = argparse.ArgumentParser()
    args_parser.add_argument('--input_raxmlH','-i1', help='text file with clean format titles (obtained via grep "^>" ncbi_ncbi.clean.align.taxa.rax.fasta|cut -f2 -d ">")', required=True)
    args_parser.add_argument('--input_ncbiH','-i2', help='text file with ncbi format titles (obtained via grep "^>" ncbi_ncbi.taxa.fasta|cut -f2 -d ">")', required=True)
    args_parser.add_argument('--input_fasta','-iF', help='fasta file with standard ncbi formated titles ncbi_ncbi.clean.align.taxa.rax.fasta', required=True)
    args_parser.add_argument('--out_fasta','-oF', help='fasta file with standard ncbi formated titles ncbi_ncbi.clean.align.taxa.ncbi.fasta', required=True)
    args = args_parser.parse_args()

    # First handle the files
    with open(args.input_raxmlH,'rt') as rh:
        raxml_heads = rh.readlines()
        raxml_heads = [ll.strip() for ll in raxml_heads]
    with open(args.input_ncbiH,'rt') as nh:
        ncbi_heads = nh.readlines()
        ncbi_heads = [ll.strip() for ll in ncbi_heads]

    input_file = args.input_fasta
    output_file = args.out_fasta
    
    with open(output_file,'wt') as out_hdl:

        with open(input_file,'rt') as subrecs:
            recs=[]
            for title, sequence in SimpleFastaParser(subrecs):
                ttl=title.split(None,1)[0].strip()
                try:
                    index=raxml_heads.index(ttl)
                    newttl=ncbi_heads[index]
                    oldID=newttl.split(" ")[0]
                    newID=newttl.split(" ")[0].replace(".","_")
                    newttl=newttl.replace(oldID, newID)
                    #newttl=newttl.split(";")[0].replace(".","_")+" "+";".join(newttl.split(" ")[2:])
                    print(newttl)
                    out_hdl.write(">%s\n%s\n" % (newttl, sequence))
                except ValueError:
                    print("record title is not in ", args.input_raxmlH, "which is fine if this is an aligned query file")
                    print(ttl)
                    out_hdl.write(">%s\n%s\n" % (ttl, sequence))
    print("fasta file successfully saved")


    #savefasta(df_merge, no_qc_outf)

if __name__ == "__main__":
    main()

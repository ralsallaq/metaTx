#!/usr/bin/env python 
""" 
This module demultiplex the sequence file generated by decard to separate fasta files speciesd by SAMPLENAME_R1_ID.fasta
"""
from __future__ import print_function
import argparse
from Bio import SeqIO, Entrez, pairwise2
from Bio.SeqRecord import SeqRecord
from Bio.SeqIO.FastaIO import SimpleFastaParser
from Bio.Seq import Seq
import re
import os, sys
import pandas as pd
import numpy as np
from Bio import Entrez
import tempfile
from shutil import copy2
######################################################################
p_description=re.compile(r"""
(description) #the keys group
=(") #the values starter
([^"]+) #the values
(") #the value terminator
""", re.VERBOSE)

p_taxa=re.compile(r"""
(taxonomy)   #the keys group
=(")  #the values starter
([^=]+) #the values: everything without the = sign even one time
(")  #the values terminator
""", re.VERBOSE)

p_organism=re.compile(r"""
(organism)   #the keys group
=(")  #the values starter
([^"]+) #the values
(")  #the values terminator
""", re.VERBOSE)

p_taxid=re.compile("""
        (ncbi_tax_id)
        =(")
        ([^=]+)
        (")
""", re.VERBOSE)


def savefasta(df_merge, no_qc_outf):
    recs=[]
    for rowi, row in df_merge.iterrows():
        name=row['name']
        description=row['description']
        taxid=p_taxid.findall(description)[0][2]
        organism=p_organism.findall(description)[0][2]
        taxonomy=p_taxa.findall(description)[0][2]
        seq=Seq(row['seq_x'].upper())
        descrip_summary=p_description.findall(description)[0][2]
        #print(descrip_summary)
        description='description="'+descrip_summary+'" organism="'+organism+'" taxonomy="'+taxonomy+'" ncbi_tax_id="'+taxid+'"'
        rec=SeqRecord(id=name, seq=seq, name=name, description=description)
        #print(rec)
        recs.append(rec)
    with open(no_qc_outf,'wt') as out_hdl:
        SeqIO.write(recs, out_hdl,"fasta")
    print("fasta file successfully saved")



def main():

    args_parser = argparse.ArgumentParser()
    args_parser.add_argument('--vsearch_fasta','-v', help='fasta file containing short-listed reference sequences rendered by vsearch', required=True)
    args_parser.add_argument('--fullreference_csv','-f', help='csv file for the full reference db', required=True)
    args_parser.add_argument('--outFasta','-o', help='fasta file containing short-listed reference sequences rendered by vsearch with full taxonomy', required=True)
    args = args_parser.parse_args()

    #read csv with seqname as index
    fullrefcsv = pd.read_csv(args.fullreference_csv, index_col=0, dtype=str)
    print(fullrefcsv.index)
    """Index(['version', 'accession', 'name', 'description', 'tax_id',
           'modified_date', 'download_date', 'version_num', 'source', 'keywords',
                  'organism', 'length', 'ambig_count', 'strain', 'mol_type', 'isolate',
                         'isolation_source', 'seq_start', 'seq_stop', 'is_type', 'is_refseq',
                                'is_published', 'confidence', 'seqhash'],
                                      dtype='object')"""
 
    with open(args.outFasta,'wt') as outhdl:
        with open(args.vsearch_fasta,'rt') as vsrecs:
            for title, sequence in SimpleFastaParser(vsrecs):
                vs_id=title.split(None,1)[0].strip()
                if (vs_id in fullrefcsv.index.values):
                    org = fullrefcsv.loc[vs_id, 'organism']
                    try:#double quotations exist
                        organsim = org.split('"')[1]
                    except:
                        organism = org

                    taxid = fullrefcsv.loc[vs_id,'tax_id'] 
                    newtitle = vs_id+' organism="'+organism+'" taxonomy="'+" "+'" ncbi_tax_id="'+taxid+'"'
                    outhdl.write(">%s\n%s\n" % (newtitle, sequence))
                else:
                    print(vs_id, " is not in the seqInfo file...check")

if __name__ == "__main__":
    main()
